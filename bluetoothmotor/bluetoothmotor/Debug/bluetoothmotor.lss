
bluetoothmotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000023a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d2d  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000900  00000000  00000000  000010e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000604  00000000  00000000  000019e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053f  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c8  00000000  00000000  0000263f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002a07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	90 d0       	rcall	.+288    	; 0x1e4 <main>
  c4:	b8 c0       	rjmp	.+368    	; 0x236 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = sendMe;
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
		UDR1 = sendMe;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 106:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10a:	08 95       	ret

0000010c <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	41 f0       	breq	.+16     	; 0x120 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 23       	and	r24, r24
 118:	ec f7       	brge	.-6      	; 0x114 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 11a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 11e:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 120:	e8 ec       	ldi	r30, 0xC8	; 200
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 23       	and	r24, r24
 128:	ec f7       	brge	.-6      	; 0x124 <USART_Receive+0x18>
		return UDR1;
 12a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 12e:	08 95       	ret

00000130 <delay_ms>:

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 130:	18 16       	cp	r1, r24
 132:	19 06       	cpc	r1, r25
 134:	5c f0       	brlt	.+22     	; 0x14c <delay_ms+0x1c>
 136:	08 95       	ret
		for(j=0;j<775;j++) {
			asm("nop");
 138:	00 00       	nop
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	31 09       	sbc	r19, r1
/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
		for(j=0;j<775;j++) {
 13e:	e1 f7       	brne	.-8      	; 0x138 <delay_ms+0x8>

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 140:	4f 5f       	subi	r20, 0xFF	; 255
 142:	5f 4f       	sbci	r21, 0xFF	; 255
 144:	48 17       	cp	r20, r24
 146:	59 07       	cpc	r21, r25
 148:	29 f4       	brne	.+10     	; 0x154 <delay_ms+0x24>
 14a:	08 95       	ret
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	50 e0       	ldi	r21, 0x00	; 0
#define RS 5				// pin number of uC connected to pin 4 of LCD disp.
#define E 6					// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
 150:	77 e0       	ldi	r23, 0x07	; 7
 152:	63 e0       	ldi	r22, 0x03	; 3
 154:	27 2f       	mov	r18, r23
 156:	36 2f       	mov	r19, r22
 158:	ef cf       	rjmp	.-34     	; 0x138 <delay_ms+0x8>

0000015a <LCD_WriteCommand>:
}

/*-------------------------------------------------------------------------*/

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
 15a:	5d 98       	cbi	0x0b, 5	; 11
	DATA_BUS = Command;
 15c:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 15e:	5e 9a       	sbi	0x0b, 6	; 11
	asm("nop");
 160:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 162:	5e 98       	cbi	0x0b, 6	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	e3 cf       	rjmp	.-58     	; 0x130 <delay_ms>
 16a:	08 95       	ret

0000016c <LCD_ClearScreen>:
}

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	f5 cf       	rjmp	.-22     	; 0x15a <LCD_WriteCommand>
 170:	08 95       	ret

00000172 <LCD_init>:
}

void LCD_init(void) {
	delay_ms(100); //wait for 100 ms for LCD to power up
 172:	84 e6       	ldi	r24, 0x64	; 100
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	dc df       	rcall	.-72     	; 0x130 <delay_ms>
	LCD_WriteCommand(0x38);
 178:	88 e3       	ldi	r24, 0x38	; 56
 17a:	ef df       	rcall	.-34     	; 0x15a <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	ed df       	rcall	.-38     	; 0x15a <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 180:	8f e0       	ldi	r24, 0x0F	; 15
 182:	eb df       	rcall	.-42     	; 0x15a <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	e9 df       	rcall	.-46     	; 0x15a <LCD_WriteCommand>
	delay_ms(10);
 188:	8a e0       	ldi	r24, 0x0A	; 10
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	d1 cf       	rjmp	.-94     	; 0x130 <delay_ms>
 18e:	08 95       	ret

00000190 <LCD_WriteData>:
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
 190:	5d 9a       	sbi	0x0b, 5	; 11
	DATA_BUS = Data;
 192:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 194:	5e 9a       	sbi	0x0b, 6	; 11
	asm("nop");
 196:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 198:	5e 98       	cbi	0x0b, 6	; 11
	delay_ms(1);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	c8 cf       	rjmp	.-112    	; 0x130 <delay_ms>
 1a0:	08 95       	ret

000001a2 <LCD_Cursor>:
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x2 LCD: column < 17; 16x1 LCD: column < 9
 1a2:	81 31       	cpi	r24, 0x11	; 17
 1a4:	18 f4       	brcc	.+6      	; 0x1ac <LCD_Cursor+0xa>
		LCD_WriteCommand(0x80 + column - 1);
 1a6:	81 58       	subi	r24, 0x81	; 129
 1a8:	d8 cf       	rjmp	.-80     	; 0x15a <LCD_WriteCommand>
 1aa:	08 95       	ret
		} else { // 6x2 LCD: column - 9; 16x1 LCD: column - 1
		LCD_WriteCommand(0xB8 + column - 9);
 1ac:	81 55       	subi	r24, 0x51	; 81
 1ae:	d5 cf       	rjmp	.-86     	; 0x15a <LCD_WriteCommand>
 1b0:	08 95       	ret

000001b2 <LCD_DisplayString>:
	}
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	18 2f       	mov	r17, r24
 1bc:	eb 01       	movw	r28, r22
	LCD_ClearScreen();
 1be:	d6 df       	rcall	.-84     	; 0x16c <LCD_ClearScreen>
	unsigned char c = column;
	while(*string) {
 1c0:	88 81       	ld	r24, Y
 1c2:	88 23       	and	r24, r24
 1c4:	51 f0       	breq	.+20     	; 0x1da <LCD_DisplayString+0x28>
		LCD_Cursor(c++);
 1c6:	01 e0       	ldi	r16, 0x01	; 1
 1c8:	01 0f       	add	r16, r17
 1ca:	81 2f       	mov	r24, r17
 1cc:	ea df       	rcall	.-44     	; 0x1a2 <LCD_Cursor>
		LCD_WriteData(*string++);
 1ce:	89 91       	ld	r24, Y+
 1d0:	df df       	rcall	.-66     	; 0x190 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 1d2:	10 2f       	mov	r17, r16
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 1d4:	88 81       	ld	r24, Y
 1d6:	81 11       	cpse	r24, r1
 1d8:	f6 cf       	rjmp	.-20     	; 0x1c6 <LCD_DisplayString+0x14>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <main>:
#include "usart_ATmega1284.h"
#include "lcd.h"

int main(void)
{
	DDRD = 0xE2; PORTD = 0x1D; // D0 = RX, D1 = TX, D5-D7 LCD control lines
 1e4:	82 ee       	ldi	r24, 0xE2	; 226
 1e6:	8a b9       	out	0x0a, r24	; 10
 1e8:	8d e1       	ldi	r24, 0x1D	; 29
 1ea:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	87 b9       	out	0x07, r24	; 7
 1f0:	18 b8       	out	0x08, r1	; 8
	LCD_init();
 1f2:	bf df       	rcall	.-130    	; 0x172 <LCD_init>
	initUSART(0);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	68 df       	rcall	.-304    	; 0xc8 <initUSART>
    /* Replace with your application code */
	unsigned char counter = 0;
	unsigned char muhBuffer[256];
	unsigned char input = 0;
	LCD_ClearScreen();
 1f8:	b9 df       	rcall	.-142    	; 0x16c <LCD_ClearScreen>
	LCD_DisplayString(1,"Hello");
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	71 e0       	ldi	r23, 0x01	; 1
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	d8 df       	rcall	.-80     	; 0x1b2 <LCD_DisplayString>
	DDRD = 0xE2; PORTD = 0x1D; // D0 = RX, D1 = TX, D5-D7 LCD control lines
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
	LCD_init();
	initUSART(0);
    /* Replace with your application code */
	unsigned char counter = 0;
 202:	c0 e0       	ldi	r28, 0x00	; 0
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 204:	00 ec       	ldi	r16, 0xC0	; 192
 206:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char input = 0;
	LCD_ClearScreen();
	LCD_DisplayString(1,"Hello");
    while (1) 
    {
		if (counter < 30) counter++;
 208:	ce 31       	cpi	r28, 0x1E	; 30
 20a:	10 f4       	brcc	.+4      	; 0x210 <main+0x2c>
 20c:	cf 5f       	subi	r28, 0xFF	; 255
 20e:	09 c0       	rjmp	.+18     	; 0x222 <main+0x3e>
 210:	f8 01       	movw	r30, r16
 212:	80 81       	ld	r24, Z
		else{
			if (USART_HasReceived(0)){
 214:	88 23       	and	r24, r24
 216:	2c f4       	brge	.+10     	; 0x222 <main+0x3e>
				LCD_Cursor(1);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	c3 df       	rcall	.-122    	; 0x1a2 <LCD_Cursor>
				input = USART_Receive(0);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	76 df       	rcall	.-276    	; 0x10c <USART_Receive>
				//LCD_DisplayString(1,input);
				LCD_WriteData(input);
 220:	b7 df       	rcall	.-146    	; 0x190 <LCD_WriteData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	ff e9       	ldi	r31, 0x9F	; 159
 224:	26 e8       	ldi	r18, 0x86	; 134
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	f1 50       	subi	r31, 0x01	; 1
 22a:	20 40       	sbci	r18, 0x00	; 0
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0x44>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x4e>
 232:	00 00       	nop
 234:	e9 cf       	rjmp	.-46     	; 0x208 <main+0x24>

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
